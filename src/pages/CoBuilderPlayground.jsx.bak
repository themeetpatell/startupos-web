import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { 
  Code, 
  Play, 
  Pause, 
  Save, 
  Download, 
  Upload, 
  Share2, 
  Heart,
  MessageSquare,
  Users,
  Star,
  Trophy,
  Zap,
  Lightbulb,
  Target,
  TrendingUp,
  Rocket,
  Crown,
  DollarSign,
  Award,
  Globe,
  Settings,
  BarChart3,
  Handshake,
  Brain,
  CheckCircle,
  AlertTriangle,
  Info,
  HelpCircle,
  XCircle,
  MinusCircle,
  PlusCircle,
  Edit,
  Trash2,
  Copy,
  Scissors,
  Paperclip,
  Link,
  ExternalLink,
  Maximize2,
  Minimize2,
  Move,
  RotateCw,
  ZoomIn,
  ZoomOut,
  Home,
  Menu,
  Grid,
  List,
  ThumbsUp,
  ThumbsDown,
  Smile,
  Frown,
  Meh,
  Gift,
  ShoppingCart,
  CreditCard,
  Wallet,
  Banknote,
  Coins,
  TrendingDown,
  ArrowUp,
  ArrowDown,
  ArrowLeft,
  ArrowRight,
  ChevronUp,
  ChevronDown,
  ChevronLeft,
  ChevronRight,
  CornerUpLeft,
  CornerUpRight,
  CornerDownLeft,
  CornerDownRight,
  GitBranch,
  GitCommit,
  GitPullRequest,
  GitMerge,
  GitCompare,
  GitBranchPlus,
  GitCommitPlus,
  GitPullRequestPlus,
  GitMergePlus,
  GitComparePlus,
  GitBranchMinus,
  GitCommitMinus,
  GitPullRequestMinus,
  GitCompare,
  GitBranch,
  GitCommit,
  GitPullRequest,
  GitMerge,
  GitCompare,
  GitBranch,
  GitCommit,
  GitPullRequest,
  GitMerge,
  GitCompare,
  GitBranch,
  GitCommit,
  GitPullRequest,
  GitMerge,
  GitCompare,
  GitBranch,
  GitCommit,
  GitPullRequest,
  GitMerge,
  GitCompare,
  GitBranch,
  GitCommit,
  GitPullRequest,
  GitMerge,
  GitCompare,
  GitBranch,
  GitCommit,
  GitPullRequest,
  GitMerge,
  GitCompare
} from 'lucide-react';

const CoBuilderPlayground = () => {
  const [activeTab, setActiveTab] = useState('features');
  const [selectedProject, setSelectedProject] = useState(null);
  const [code, setCode] = useState('');
  const [isRunning, setIsRunning] = useState(false);

  const projects = [
    {
      id: 1,
      title: "AI Co-Builder Enhancement",
      description: "Improve the AI co-builder with new features and capabilities",
      category: "AI/ML",
      difficulty: "Intermediate",
      contributors: 12,
      stars: 45,
      status: "Active",
      icon: Brain,
      color: "from-purple-400 to-pink-500"
    },
    {
      id: 2,
      title: "Gamification System",
      description: "Build new gamification features for startup progress tracking",
      category: "Gamification",
      difficulty: "Advanced",
      contributors: 8,
      stars: 32,
      status: "Active",
      icon: Trophy,
      color: "from-yellow-400 to-orange-500"
    },
    {
      id: 3,
      title: "Analytics Dashboard",
      description: "Create real-time analytics and reporting features",
      category: "Analytics",
      difficulty: "Intermediate",
      contributors: 15,
      stars: 67,
      status: "Active",
      icon: BarChart3,
      color: "from-blue-400 to-cyan-500"
    },
    {
      id: 4,
      title: "Ecosystem Integration",
      description: "Connect with external startup ecosystem platforms",
      category: "Integration",
      difficulty: "Advanced",
      contributors: 6,
      stars: 28,
      status: "Planning",
      icon: Globe,
      color: "from-green-400 to-emerald-500"
    }
  ];

  const contributions = [
    {
      id: 1,
      user: "Sarah Chen",
      avatar: "/avatars/sarah.jpg",
      project: "AI Co-Builder Enhancement",
      type: "Feature",
      description: "Added sentiment analysis to AI responses",
      timestamp: "2 hours ago",
      status: "Merged",
      icon: GitMerge,
      color: "from-green-400 to-emerald-500"
    },
    {
      id: 2,
      user: "Alex Kim",
      avatar: "/avatars/alex.jpg",
      project: "Gamification System",
      type: "Bug Fix",
      description: "Fixed progress tracking bug in achievement system",
      timestamp: "4 hours ago",
      status: "Review",
      icon: GitPullRequest,
      color: "from-blue-400 to-cyan-500"
    },
    {
      id: 3,
      user: "Mike Johnson",
      avatar: "/avatars/mike.jpg",
      project: "Analytics Dashboard",
      type: "Feature",
      description: "Added custom chart configurations",
      timestamp: "6 hours ago",
      status: "Merged",
      icon: GitMerge,
      color: "from-green-400 to-emerald-500"
    },
    {
      id: 4,
      user: "Lisa Park",
      avatar: "/avatars/lisa.jpg",
      project: "Ecosystem Integration",
      type: "Documentation",
      description: "Updated API documentation for new endpoints",
      timestamp: "8 hours ago",
      status: "Merged",
      icon: GitMerge,
      color: "from-green-400 to-emerald-500"
    }
  ];

  const tabs = [
    { id: 'features', name: 'Active Projects', icon: Code },
    { id: 'contributions', name: 'Recent Contributions', icon: GitCommit },
    { id: 'playground', name: 'Live Playground', icon: Play },
    { id: 'leaderboard', name: 'Leaderboard', icon: Trophy }
  ];

  const leaderboard = [
    { rank: 1, user: "Sarah Chen", contributions: 47, points: 1250, avatar: "/avatars/sarah.jpg" },
    { rank: 2, user: "Alex Kim", contributions: 32, points: 980, avatar: "/avatars/alex.jpg" },
    { rank: 3, user: "Mike Johnson", contributions: 28, points: 845, avatar: "/avatars/mike.jpg" },
    { rank: 4, user: "Lisa Park", contributions: 25, points: 720, avatar: "/avatars/lisa.jpg" },
    { rank: 5, user: "David Chen", contributions: 22, points: 680, avatar: "/avatars/david.jpg" }
  ];

  const sampleCode = `// Example: AI Co-Builder Enhancement
import { AIBuilder } from '@startupos/ai-builder';

class EnhancedAIBuilder extends AIBuilder {
  constructor() {
    super();
    this.sentimentAnalyzer = new SentimentAnalyzer();
  }

  async generateResponse(prompt, context) {
    // Add sentiment analysis
    const sentiment = await this.sentimentAnalyzer.analyze(prompt);
    
    // Adjust response based on sentiment
    const response = await super.generateResponse(prompt, context);
    
    return this.adjustTone(response, sentiment);
  }

  adjustTone(response, sentiment) {
    // Implementation for tone adjustment
    return response;
  }
}

export default EnhancedAIBuilder;`;

  return (
    <div className="min-h-screen pt-16 ultra-gradient-bg">
      {/* Hero Section */}
      <section className="py-32 relative overflow-hidden">
        <div className="absolute inset-0 bg-gradient-to-b from-slate-900 via-purple-900/20 to-slate-900" />
        
        <div className="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <motion.div
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            className="text-center mb-20"
          >
            <motion.div
              initial={{ scale: 0 }}
              animate={{ scale: 1 }}
              transition={{ duration: 0.6, delay: 0.2 }}
              className="inline-flex items-center space-x-2 bg-gradient-to-r from-purple-500/20 to-pink-500/20 rounded-full px-6 py-3 mb-8"
            >
              <Code className="w-5 h-5 text-purple-400" />
              <span className="text-purple-400 font-medium">Live Development</span>
            </motion.div>

            <h1 className="text-5xl md:text-7xl font-bold mb-6">
              <span className="ultra-text-gradient">Co-Builder Playground</span>
            </h1>
            <p className="text-xl text-white/70 max-w-3xl mx-auto leading-relaxed mb-12">
              Contribute to building StartupOS itself! Join our community of developers, 
              designers, and startup enthusiasts in creating the future of startup tools.
            </p>

            <div className="flex flex-col sm:flex-row items-center justify-center space-y-4 sm:space-y-0 sm:space-x-6">
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                className="ultra-button flex items-center space-x-2"
              >
                <GitBranch className="w-5 h-5" />
                <span>Start Contributing</span>
              </motion.button>
              
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                className="px-8 py-4 text-white/80 hover:text-white transition-colors"
              >
                <span>View Documentation</span>
              </motion.button>
            </div>
          </motion.div>
        </div>
      </section>

      {/* Tabs Navigation */}
      <section className="py-8 relative">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex flex-wrap justify-center gap-4">
            {tabs.map((tab) => (
              <motion.button
                key={tab.id}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => setActiveTab(tab.id)}
                className={`flex items-center space-x-2 px-6 py-3 rounded-full text-sm font-medium transition-colors ${
                  activeTab === tab.id
                    ? 'bg-purple-500 text-white'
                    : 'bg-white/5 text-white/70 hover:text-white hover:bg-white/10'
                }`}
              >
                <tab.icon className="w-4 h-4" />
                <span>{tab.name}</span>
              </motion.button>
            ))}
          </div>
        </div>
      </section>

      {/* Active Projects */}
      {activeTab === 'features' && (
        <section className="py-20 relative">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <motion.div
              initial={{ opacity: 0, y: 50 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8 }}
              className="mb-12"
            >
              <h2 className="text-4xl font-bold text-white mb-4">Active Projects</h2>
              <p className="text-xl text-white/70">Choose a project to contribute to</p>
            </motion.div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
              {projects.map((project, index) => (
                <motion.div
                  key={project.id}
                  initial={{ opacity: 0, y: 50 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.6, delay: index * 0.1 }}
                  className="ultra-glass rounded-xl overflow-hidden border border-white/10 cursor-pointer hover:border-purple-500/30 transition-colors"
                  onClick={() => setSelectedProject(project)}
                >
                  <div className={`h-32 bg-gradient-to-br ${project.color} flex items-center justify-center`}>
                    <project.icon className="w-12 h-12 text-white" />
                  </div>
                  
                  <div className="p-6">
                    <div className="flex items-center justify-between mb-3">
                      <span className={`text-xs px-2 py-1 rounded-full ${
                        project.status === 'Active' ? 'bg-green-500/20 text-green-400' : 'bg-yellow-500/20 text-yellow-400'
                      }`}>
                        {project.status}
                      </span>
                      <span className="text-xs text-white/60">{project.difficulty}</span>
                    </div>
                    
                    <h3 className="text-lg font-bold text-white mb-2">{project.title}</h3>
                    <p className="text-white/70 text-sm mb-4 line-clamp-2">{project.description}</p>
                    
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-4 text-sm text-white/60">
                        <div className="flex items-center space-x-1">
                          <Users className="w-4 h-4" />
                          <span>{project.contributors}</span>
                        </div>
                        <div className="flex items-center space-x-1">
                          <Star className="w-4 h-4" />
                          <span>{project.stars}</span>
                        </div>
                      </div>
                      <span className="text-purple-400 text-sm font-medium">{project.category}</span>
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
          </div>
        </section>
      )}

      {/* Recent Contributions */}
      {activeTab === 'contributions' && (
        <section className="py-20 relative">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <motion.div
              initial={{ opacity: 0, y: 50 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8 }}
              className="mb-12"
            >
              <h2 className="text-4xl font-bold text-white mb-4">Recent Contributions</h2>
              <p className="text-xl text-white/70">Latest updates from our community</p>
            </motion.div>

            <div className="space-y-6">
              {contributions.map((contribution, index) => (
                <motion.div
                  key={contribution.id}
                  initial={{ opacity: 0, y: 50 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.6, delay: index * 0.1 }}
                  className="ultra-glass p-6 rounded-xl border border-white/10"
                >
                  <div className="flex items-start space-x-4">
                    <div className="w-12 h-12 bg-gradient-to-r from-green-400 to-emerald-500 rounded-full flex items-center justify-center">
                      <Users className="w-6 h-6 text-white" />
                    </div>
                    
                    <div className="flex-1">
                      <div className="flex items-center space-x-3 mb-2">
                        <h3 className="text-white font-semibold">{contribution.user}</h3>
                        <span className="text-white/60 text-sm">{contribution.timestamp}</span>
                        <div className={`flex items-center space-x-1 px-2 py-1 rounded-full text-xs ${
                          contribution.status === 'Merged' ? 'bg-green-500/20 text-green-400' : 'bg-blue-500/20 text-blue-400'
                        }`}>
                          <contribution.icon className="w-3 h-3" />
                          <span>{contribution.status}</span>
                        </div>
                      </div>
                      
                      <p className="text-white/80 mb-2">{contribution.description}</p>
                      <p className="text-purple-400 text-sm font-medium">{contribution.project}</p>
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
          </div>
        </section>
      )}

      {/* Live Playground */}
      {activeTab === 'playground' && (
        <section className="py-20 relative">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <motion.div
              initial={{ opacity: 0, y: 50 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8 }}
              className="mb-12"
            >
              <h2 className="text-4xl font-bold text-white mb-4">Live Playground</h2>
              <p className="text-xl text-white/70">Test your code in real-time</p>
            </motion.div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              {/* Code Editor */}
              <motion.div
                initial={{ opacity: 0, x: -50 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.8 }}
                className="ultra-glass rounded-xl border border-white/10"
              >
                <div className="p-6 border-b border-white/10">
                  <div className="flex items-center justify-between">
                    <h3 className="text-lg font-bold text-white">Code Editor</h3>
                    <div className="flex items-center space-x-2">
                      <motion.button
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                        onClick={() => setIsRunning(!isRunning)}
                        className={`flex items-center space-x-2 px-4 py-2 rounded-lg text-sm font-medium ${
                          isRunning ? 'bg-red-500 text-white' : 'bg-green-500 text-white'
                        }`}
                      >
                        {isRunning ? <Pause className="w-4 h-4" /> : <Play className="w-4 h-4" />}
                        <span>{isRunning ? 'Stop' : 'Run'}</span>
                      </motion.button>
                      <motion.button
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                        className="flex items-center space-x-2 px-4 py-2 bg-blue-500 text-white rounded-lg text-sm font-medium"
                      >
                        <Save className="w-4 h-4" />
                        <span>Save</span>
                      </motion.button>
                    </div>
                  </div>
                </div>
                
                <div className="p-6">
                  <textarea
                    value={code}
                    onChange={(e) => setCode(e.target.value)}
                    placeholder="Write your code here..."
                    className="w-full h-64 bg-slate-900 text-white p-4 rounded-lg border border-white/10 focus:outline-none focus:border-purple-400 font-mono text-sm"
                    defaultValue={sampleCode}
                  />
                </div>
              </motion.div>

              {/* Output Console */}
              <motion.div
                initial={{ opacity: 0, x: 50 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.8 }}
                className="ultra-glass rounded-xl border border-white/10"
              >
                <div className="p-6 border-b border-white/10">
                  <h3 className="text-lg font-bold text-white">Output Console</h3>
                </div>
                
                <div className="p-6">
                  <div className="bg-slate-900 rounded-lg p-4 h-64 overflow-y-auto">
                    <div className="text-green-400 font-mono text-sm">
                      <div>$ npm run test</div>
                      <div className="text-white mt-2">✓ All tests passed</div>
                      <div className="text-blue-400 mt-2">✓ Code quality checks passed</div>
                      <div className="text-yellow-400 mt-2">⚠ 2 minor warnings</div>
                      <div className="text-white mt-4">Build successful!</div>
                    </div>
                  </div>
                </div>
              </motion.div>
            </div>
          </div>
        </section>
      )}

      {/* Leaderboard */}
      {activeTab === 'leaderboard' && (
        <section className="py-20 relative">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <motion.div
              initial={{ opacity: 0, y: 50 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8 }}
              className="mb-12"
            >
              <h2 className="text-4xl font-bold text-white mb-4">Contributor Leaderboard</h2>
              <p className="text-xl text-white/70">Top contributors this month</p>
            </motion.div>

            <div className="ultra-glass rounded-xl border border-white/10 overflow-hidden">
              <div className="p-6 border-b border-white/10">
                <h3 className="text-lg font-bold text-white">Top Contributors</h3>
              </div>
              
              <div className="divide-y divide-white/10">
                {leaderboard.map((user, index) => (
                  <motion.div
                    key={user.rank}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.6, delay: index * 0.1 }}
                    className="p-6 flex items-center space-x-4"
                  >
                    <div className="w-8 h-8 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full flex items-center justify-center text-white font-bold">
                      {user.rank}
                    </div>
                    
                    <div className="w-10 h-10 bg-gradient-to-r from-green-400 to-emerald-500 rounded-full flex items-center justify-center">
                      <Users className="w-5 h-5 text-white" />
                    </div>
                    
                    <div className="flex-1">
                      <h4 className="text-white font-semibold">{user.user}</h4>
                      <p className="text-white/60 text-sm">{user.contributions} contributions</p>
                    </div>
                    
                    <div className="text-right">
                      <p className="text-white font-bold">{user.points} pts</p>
                      <p className="text-white/60 text-sm">Level {Math.floor(user.points / 100)}</p>
                    </div>
                  </motion.div>
                ))}
              </div>
            </div>
          </div>
        </section>
      )}

      {/* CTA Section */}
      <section className="py-20 relative">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
          <motion.div
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            className="ultra-glass rounded-3xl p-12 text-center border border-purple-500/20"
          >
            <h2 className="text-3xl font-bold text-white mb-4">
              Ready to Contribute?
            </h2>
            <p className="text-xl text-white/70 mb-8">
              Join our community of developers and help build the future of startup tools. 
              Every contribution makes StartupOS better for founders worldwide.
            </p>

            <div className="flex flex-col sm:flex-row items-center justify-center space-y-4 sm:space-y-0 sm:space-x-6">
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                className="ultra-button flex items-center space-x-2"
              >
                <GitBranch className="w-5 h-5" />
                <span>Fork Repository</span>
              </motion.button>
              
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                className="px-8 py-4 text-white/80 hover:text-white transition-colors"
              >
                <span>Join Discord</span>
              </motion.button>
            </div>
          </motion.div>
        </div>
      </section>
    </div>
  );
};

export default CoBuilderPlayground; 